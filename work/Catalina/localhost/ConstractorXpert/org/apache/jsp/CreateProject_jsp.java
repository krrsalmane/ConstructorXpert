/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-24 10:32:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class CreateProject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Construction Xpert - New Project</title>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"font-sans bg-gray-50\">\r\n");
      out.write("<!-- Navbar -->\r\n");
      out.write("<nav class=\"bg-green-800 text-white\">\r\n");
      out.write("    <div class=\"container mx-auto px-6 py-4 flex justify-between items-center\">\r\n");
      out.write("        <div class=\"flex items-center\">\r\n");
      out.write("            <div class=\"w-10 h-10 bg-white rounded-md flex items-center justify-center mr-2\">\r\n");
      out.write("                <div class=\"w-6 h-6 border-2 border-green-800\"></div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <div class=\"text-sm font-bold\">CONSTRUCTION</div>\r\n");
      out.write("                <div class=\"text-sm font-bold\">XPERT</div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <ul class=\"hidden md:flex space-x-6\">\r\n");
      out.write("            <li><a href=\"index.jsp\" class=\"hover:text-green-300 font-medium\">HOME</a></li>\r\n");
      out.write("            <li><a href=\"projet\" class=\"hover:text-green-300 font-medium\">PROJECTS</a></li>\r\n");
      out.write("            <li><a href=\"tache\" class=\"hover:text-green-300 font-medium\">TASKS</a></li>\r\n");
      out.write("            <li><a href=\"resources.jsp\" class=\"hover:text-green-300 font-medium\">RESOURCES</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("<!-- Form Section -->\r\n");
      out.write("<section class=\"container mx-auto px-6 py-20\">\r\n");
      out.write("    <div class=\"max-w-lg mx-auto bg-white p-8 rounded-lg shadow-xl border-t-4 border-green-600\">\r\n");
      out.write("        <h2 class=\"text-2xl font-bold text-green-800 mb-6\">Add New Project</h2>\r\n");
      out.write("        <form id=\"projectForm\" action=\"projet\" method=\"post\" onsubmit=\"return validateForm()\">\r\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"add\">\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("                <label for=\"nom\" class=\"block text-gray-700 font-medium mb-2\">Name</label>\r\n");
      out.write("                <input type=\"text\" id=\"nom\" name=\"nom\" class=\"w-full p-3 border border-green-600 rounded-lg\">\r\n");
      out.write("                <span id=\"nomError\" class=\"text-red-500 text-sm hidden\">Name is required and must contain only letters and spaces</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("                <label for=\"description\" class=\"block text-gray-700 font-medium mb-2\">Description</label>\r\n");
      out.write("                <textarea id=\"description\" name=\"description\" rows=\"4\" class=\"w-full p-3 border border-green-600 rounded-lg\"></textarea>\r\n");
      out.write("                <span id=\"descriptionError\" class=\"text-red-500 text-sm hidden\">Description is required</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("                <label for=\"dateDebut\" class=\"block text-gray-700 font-medium mb-2\">Start Date</label>\r\n");
      out.write("                <input type=\"date\" id=\"dateDebut\" name=\"dateDebut\" class=\"w-full p-3 border border-green-600 rounded-lg\">\r\n");
      out.write("                <span id=\"dateDebutError\" class=\"text-red-500 text-sm hidden\">Start date is required and must be before end date</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("                <label for=\"dateFin\" class=\"block text-gray-700 font-medium mb-2\">End Date</label>\r\n");
      out.write("                <input type=\"date\" id=\"dateFin\" name=\"dateFin\" class=\"w-full p-3 border border-green-600 rounded-lg\">\r\n");
      out.write("                <span id=\"dateFinError\" class=\"text-red-500 text-sm hidden\">End date is required and must be after start date</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-6\">\r\n");
      out.write("                <label for=\"budget\" class=\"block text-gray-700 font-medium mb-2\">Budget</label>\r\n");
      out.write("                <input type=\"number\" id=\"budget\" name=\"budget\" step=\"0.01\" class=\"w-full p-3 border border-green-600 rounded-lg\">\r\n");
      out.write("                <span id=\"budgetError\" class=\"text-red-500 text-sm hidden\">Budget is required and must be positive</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"flex justify-end space-x-4\">\r\n");
      out.write("                <a href=\"projet\" class=\"px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100\">Cancel</a>\r\n");
      out.write("                <a href=\"projet\" class=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-md\">Project List</a>\r\n");
      out.write("                <button type=\"submit\" class=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 shadow-md\">Create Project</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<!-- Footer -->\r\n");
      out.write("<footer class=\"bg-green-800 text-white py-8\">\r\n");
      out.write("    <div class=\"container mx-auto px-6 text-center\">\r\n");
      out.write("        <div class=\"flex items-center justify-center mb-4\">\r\n");
      out.write("            <div class=\"w-8 h-8 bg-white rounded-md flex items-center justify-center mr-2\">\r\n");
      out.write("                <div class=\"w-5 h-5 border-2 border-green-800\"></div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <span class=\"font-bold\">CONSTRUCTION XPERT</span>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"text-sm\">© 2025 Construction Xpert. All rights reserved.</div>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("<!-- Validation Script -->\r\n");
      out.write("<script>\r\n");
      out.write("    // Set default start date to today\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        const today = new Date().toISOString().split('T')[0];\r\n");
      out.write("        document.getElementById('dateDebut').value = today;\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    function validateForm() {\r\n");
      out.write("        document.querySelectorAll('#projectForm .text-red-500').forEach(error => error.classList.add('hidden'));\r\n");
      out.write("        let isValid = true;\r\n");
      out.write("\r\n");
      out.write("        const nom = document.getElementById('nom').value.trim();\r\n");
      out.write("        const description = document.getElementById('description').value.trim();\r\n");
      out.write("        const dateDebut = document.getElementById('dateDebut').value;\r\n");
      out.write("        const dateFin = document.getElementById('dateFin').value;\r\n");
      out.write("        const budget = parseFloat(document.getElementById('budget').value);\r\n");
      out.write("\r\n");
      out.write("        const nomRegex = /^[a-zA-Z\\s]+$/;\r\n");
      out.write("        if (!nom || !nomRegex.test(nom)) {\r\n");
      out.write("            document.getElementById('nomError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("        if (!description) {\r\n");
      out.write("            document.getElementById('descriptionError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("        if (!dateDebut) {\r\n");
      out.write("            document.getElementById('dateDebutError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("        if (!dateFin) {\r\n");
      out.write("            document.getElementById('dateFinError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("        if (dateDebut && dateFin && new Date(dateDebut) >= new Date(dateFin)) {\r\n");
      out.write("            document.getElementById('dateDebutError').classList.remove('hidden');\r\n");
      out.write("            document.getElementById('dateFinError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("        if (isNaN(budget) || budget <= 0) {\r\n");
      out.write("            document.getElementById('budgetError').classList.remove('hidden');\r\n");
      out.write("            isValid = false;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        return isValid;\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
