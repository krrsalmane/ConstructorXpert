/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-19 14:43:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class projectList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1741172575709L));
    _jspx_dependants.put("jar:file:/C:/Users/krr.salmane/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/3.0.1/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664449878000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>Project List</title>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-gray-100 font-sans\">\r\n");
      out.write("<div class=\"container mx-auto p-6\">\r\n");
      out.write("  <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Projects</h1>\r\n");
      out.write("  <table class=\"w-full bg-white shadow-md rounded-lg overflow-hidden\">\r\n");
      out.write("    <thead class=\"bg-gray-200\">\r\n");
      out.write("    <tr>\r\n");
      out.write("      <th class=\"p-3 text-left\">ID</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">Name</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">Description</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">Start Date</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">End Date</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">Budget</th>\r\n");
      out.write("      <th class=\"p-3 text-left\">Actions</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("    ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </tbody>\r\n");
      out.write("  </table>\r\n");
      out.write("\r\n");
      out.write("  <!-- Add New Project Form -->\r\n");
      out.write("  <h2 class=\"text-2xl font-semibold mt-8 mb-4 text-gray-700\">Add New Project</h2>\r\n");
      out.write("  <form action=\"projet\" method=\"post\" class=\"bg-white p-6 rounded-lg shadow-md\" id=\"addProjectForm\" onsubmit=\"return validateAddForm()\">\r\n");
      out.write("    <input type=\"hidden\" name=\"action\" value=\"add\">\r\n");
      out.write("    <div class=\"mb-4\">\r\n");
      out.write("      <label class=\"block text-gray-700\">Name:</label>\r\n");
      out.write("      <input type=\"text\" name=\"nom\" id=\"addNom\" class=\"w-full p-2 border rounded-md\">\r\n");
      out.write("      <span id=\"addNomError\" class=\"text-red-500 text-sm hidden\">Name is required and must contain only letters and spaces</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"mb-4\">\r\n");
      out.write("      <label class=\"block text-gray-700\">Description:</label>\r\n");
      out.write("      <input type=\"text\" name=\"description\" id=\"addDescription\" class=\"w-full p-2 border rounded-md\">\r\n");
      out.write("      <span id=\"addDescriptionError\" class=\"text-red-500 text-sm hidden\">Description is required</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"mb-4\">\r\n");
      out.write("      <label class=\"block text-gray-700\">Start Date:</label>\r\n");
      out.write("      <input type=\"date\" name=\"dateDebut\" id=\"addDateDebut\" class=\"w-full p-2 border rounded-md\">\r\n");
      out.write("      <span id=\"addDateDebutError\" class=\"text-red-500 text-sm hidden\">Start date is required and must be before end date</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"mb-4\">\r\n");
      out.write("      <label class=\"block text-gray-700\">End Date:</label>\r\n");
      out.write("      <input type=\"date\" name=\"dateFin\" id=\"addDateFin\" class=\"w-full p-2 border rounded-md\">\r\n");
      out.write("      <span id=\"addDateFinError\" class=\"text-red-500 text-sm hidden\">End date is required and must be after start date</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"mb-4\">\r\n");
      out.write("      <label class=\"block text-gray-700\">Budget:</label>\r\n");
      out.write("      <input type=\"number\" name=\"budget\" id=\"addBudget\" step=\"0.01\" class=\"w-full p-2 border rounded-md\">\r\n");
      out.write("      <span id=\"addBudgetError\" class=\"text-red-500 text-sm hidden\">Budget is required and must be positive</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">Add Project</button>\r\n");
      out.write("  </form>\r\n");
      out.write("\r\n");
      out.write("  <!-- Edit Project Form (shown only if editing) -->\r\n");
      out.write("  ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  // Validation for Add Form\r\n");
      out.write("  function validateAddForm() {\r\n");
      out.write("    // Reset error messages\r\n");
      out.write("    document.querySelectorAll('#addProjectForm .text-red-500').forEach(error => error.classList.add('hidden'));\r\n");
      out.write("    let isValid = true;\r\n");
      out.write("    // Get field values\r\n");
      out.write("    const nom = document.getElementById('addNom').value.trim();\r\n");
      out.write("    const description = document.getElementById('addDescription').value.trim();\r\n");
      out.write("    const dateDebut = document.getElementById('addDateDebut').value;\r\n");
      out.write("    const dateFin = document.getElementById('addDateFin').value;\r\n");
      out.write("    const budget = parseFloat(document.getElementById('addBudget').value);\r\n");
      out.write("\r\n");
      out.write("    // Validate Name (required, letters and spaces only)\r\n");
      out.write("    const nomRegex = /^[a-zA-Z\\s]+$/;\r\n");
      out.write("    if (!nom || !nomRegex.test(nom)) {\r\n");
      out.write("      document.getElementById('addNomError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Validate Description (required)\r\n");
      out.write("    if (!description) {\r\n");
      out.write("      document.getElementById('addDescriptionError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Validate Dates (required and logical order)\r\n");
      out.write("    if (!dateDebut) {\r\n");
      out.write("      document.getElementById('addDateDebutError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("    if (!dateFin) {\r\n");
      out.write("      document.getElementById('addDateFinError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("    if (dateDebut && dateFin) {\r\n");
      out.write("      const debut = new Date(dateDebut);\r\n");
      out.write("      const fin = new Date(dateFin);\r\n");
      out.write("      if (debut > fin) {\r\n");
      out.write("        document.getElementById('addDateDebutError').classList.remove('hidden');\r\n");
      out.write("        document.getElementById('addDateFinError').classList.remove('hidden');\r\n");
      out.write("        isValid = false;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Validate Budget (required and positive)\r\n");
      out.write("    if (isNaN(budget) || budget <= 0) {\r\n");
      out.write("      document.getElementById('addBudgetError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return isValid;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Validation for Edit Form\r\n");
      out.write("  function validateEditForm() {\r\n");
      out.write("    // Reset error messages\r\n");
      out.write("    document.querySelectorAll('#editProjectForm .text-red-500').forEach(error => error.classList.add('hidden'));\r\n");
      out.write("\r\n");
      out.write("    let isValid = true;\r\n");
      out.write("\r\n");
      out.write("    // Get field values\r\n");
      out.write("    const nom = document.getElementById('editNom').value.trim();\r\n");
      out.write("    const description = document.getElementById('editDescription').value.trim();\r\n");
      out.write("    const dateDebut = document.getElementById('editDateDebut').value;\r\n");
      out.write("    const dateFin = document.getElementById('editDateFin').value;\r\n");
      out.write("    const budget = parseFloat(document.getElementById('editBudget').value);\r\n");
      out.write("\r\n");
      out.write("    // Validate Name (required, letters and spaces only)\r\n");
      out.write("    const nomRegex = /^[a-zA-Z\\s]+$/;\r\n");
      out.write("    if (!nom || !nomRegex.test(nom)) {\r\n");
      out.write("      document.getElementById('editNomError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Validate Description (required)\r\n");
      out.write("    if (!description) {\r\n");
      out.write("      document.getElementById('editDescriptionError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Validate Dates (required and logical order)\r\n");
      out.write("    if (!dateDebut) {\r\n");
      out.write("      document.getElementById('editDateDebutError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("    if (!dateFin) {\r\n");
      out.write("      document.getElementById('editDateFinError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("    if (dateDebut && dateFin) {\r\n");
      out.write("      const debut = new Date(dateDebut);\r\n");
      out.write("      const fin = new Date(dateFin);\r\n");
      out.write("      if (debut > fin) {\r\n");
      out.write("        document.getElementById('editDateDebutError').classList.remove('hidden');\r\n");
      out.write("        document.getElementById('editDateFinError').classList.remove('hidden');\r\n");
      out.write("        isValid = false;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    // Validate Budget (required and positive)\r\n");
      out.write("    if (isNaN(budget) || budget <= 0) {\r\n");
      out.write("      document.getElementById('editBudgetError').classList.remove('hidden');\r\n");
      out.write("      isValid = false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return isValid;\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /projectList.jsp(26,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("projet");
    // /projectList.jsp(26,4) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/projectList.jsp(26,4) '${projets}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${projets}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("      <tr class=\"border-b\">\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.nom}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.description}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.dateDebut}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.dateFin}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.budget}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</td>\r\n");
          out.write("        <td class=\"p-3 space-x-2\">\r\n");
          out.write("          <a href=\"tache?projetId=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" class=\"text-blue-500 hover:underline\">View Tasks</a>\r\n");
          out.write("          <a href=\"projet?action=edit&id=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" class=\"text-green-500 hover:underline\">Edit</a>\r\n");
          out.write("          <a href=\"projet?action=delete&id=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projet.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" class=\"text-red-500 hover:underline\" onclick=\"return confirm('Are you sure you want to delete this project?');\">Delete</a>\r\n");
          out.write("        </td>\r\n");
          out.write("      </tr>\r\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent(null);
    // /projectList.jsp(77,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty projetToEdit}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    <h2 class=\"text-2xl font-semibold mt-8 mb-4 text-gray-700\">Edit Project</h2>\r\n");
        out.write("    <form action=\"projet\" method=\"post\" class=\"bg-white p-6 rounded-lg shadow-md\" id=\"editProjectForm\" onsubmit=\"return validateEditForm()\">\r\n");
        out.write("      <input type=\"hidden\" name=\"action\" value=\"update\">\r\n");
        out.write("      <input type=\"hidden\" name=\"id\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\">\r\n");
        out.write("      <div class=\"mb-4\">\r\n");
        out.write("        <label class=\"block text-gray-700\">Name:</label>\r\n");
        out.write("        <input type=\"text\" name=\"nom\" id=\"editNom\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.nom}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"w-full p-2 border rounded-md\">\r\n");
        out.write("        <span id=\"editNomError\" class=\"text-red-500 text-sm hidden\">Name is required and must contain only letters and spaces</span>\r\n");
        out.write("      </div>\r\n");
        out.write("      <div class=\"mb-4\">\r\n");
        out.write("        <label class=\"block text-gray-700\">Description:</label>\r\n");
        out.write("        <input type=\"text\" name=\"description\" id=\"editDescription\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.description}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"w-full p-2 border rounded-md\">\r\n");
        out.write("        <span id=\"editDescriptionError\" class=\"text-red-500 text-sm hidden\">Description is required</span>\r\n");
        out.write("      </div>\r\n");
        out.write("      <div class=\"mb-4\">\r\n");
        out.write("        <label class=\"block text-gray-700\">Start Date:</label>\r\n");
        out.write("        <input type=\"date\" name=\"dateDebut\" id=\"editDateDebut\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.dateDebut}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"w-full p-2 border rounded-md\">\r\n");
        out.write("        <span id=\"editDateDebutError\" class=\"text-red-500 text-sm hidden\">Start date is required and must be before end date</span>\r\n");
        out.write("      </div>\r\n");
        out.write("      <div class=\"mb-4\">\r\n");
        out.write("        <label class=\"block text-gray-700\">End Date:</label>\r\n");
        out.write("        <input type=\"date\" name=\"dateFin\" id=\"editDateFin\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.dateFin}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"w-full p-2 border rounded-md\">\r\n");
        out.write("        <span id=\"editDateFinError\" class=\"text-red-500 text-sm hidden\">End date is required and must be after start date</span>\r\n");
        out.write("      </div>\r\n");
        out.write("      <div class=\"mb-4\">\r\n");
        out.write("        <label class=\"block text-gray-700\">Budget:</label>\r\n");
        out.write("        <input type=\"number\" name=\"budget\" id=\"editBudget\" step=\"0.01\" value=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projetToEdit.budget}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"w-full p-2 border rounded-md\">\r\n");
        out.write("        <span id=\"editBudgetError\" class=\"text-red-500 text-sm hidden\">Budget is required and must be positive</span>\r\n");
        out.write("      </div>\r\n");
        out.write("      <button type=\"submit\" class=\"bg-green-500 text-white p-2 rounded-md hover:bg-green-600\">Update Project</button>\r\n");
        out.write("    </form>\r\n");
        out.write("  ");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    return false;
  }
}
